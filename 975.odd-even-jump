    int oddEvenJumps(vector<int>& arr) {
        int n = arr.size(), res = 1; 
        vector<int> v1 (n, 0), v2 (n, 0);
        v1.back() = v2.back() = 1; 
        
        map<int, int> M; // number and index
        M[arr.back()] = n - 1;
        
        for (int i = n - 2; i >= 0; --i) {
            auto p1 = M.lower_bound(arr[i]), p2 = M.upper_bound(arr[i]);
            
            if (p1 != M.end()) v1[i] = v2[p1 -> second];
            if (p2 != M.begin()) v2[i] = v1[(--p2) -> second];
        
            if (v1[i] == 1) ++res; 
            M[arr[i]] = i;
        }
        
        return res; 
    }
